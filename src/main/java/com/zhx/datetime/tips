之前，时间的表示方法是java.util.Date，包含了年月日时分秒，在此处，抛出一个问题，如何使用java.util.Date表示2014年3月18日，可能我们会
用到java.util.Calender这个类，如下代码：
    Calendar calendar = Calendar.getInstance();
    calendar.set(Calendar.YEAR, 2014);
    calendar.set(Calendar.MONTH, 2);
    calendar.set(Calendar.DAY_OF_MONTH, 18);
    calendar.set(Calendar.HOUR_OF_DAY, 0);
    calendar.set(Calendar.MINUTE, 0);
    calendar.set(Calendar.SECOND, 0);
当然，也可以使用java.util.Date，如下代码：
    Date date = new Date(114, 2, 18);
    System.out.println(date);
以上的代码运行起来都不会有什么问题，但是有些地方看起来却很奇怪，比如：月份明明是3月，为什么却设置了2，114又是什么鬼？其实，114是2014年
到1900年共过去了114年。
Date和Calendar这两个类，它们之间有很多相交的功能点，我们该使用哪一个呢？再加上java.text.DateFormat也是一个线程不安全的类，综上，java8
之前关于时间的API很不友好，甚至很多用户转向了第三方的包，鉴于此，java8重新设计了时间API：
1》LocalDate
    一个只包含日期不包含时分秒的时间对象，可以通过静态工厂方法of创建一个LocalDate实例，并且提供了多种方法来 读取常用的值，比如年份、
    月份、星期几等，eg：com.zhx.datetime.TestLocalDate
2》LocalTime
    类似地，一天中的时间，比如13:45:20，可以使用LocalTime类表示。我们可以使用of工厂方法创建LocalTime的实例,同LocalDate一样，
    LocalTime类也提供了一些getter方法访问这些变量的值，eg：com.zhx.datetime.TestLocalTime
3》LocalDateTime
    LocalDateTime是LocalDate和LocalTime的合体。它同时表示了日期和时间，但不带有时区信息，你可以直接创建，也可以通过合并日期和时间对象
    去构造，eg：com.zhx.datetime.TestLocalDateTime
4》Period
    上面的三个类都实现了Temporal接口，如果我们想知道两个Temporal的Period或者Duration（Duration主要用于以秒和纳秒衡量时间的长短，
    这里不做介绍，而Period主要是以年、月或者日的方式对多个时间单位建模，比较常用，eg：com.zhx.datetime.TestPeriod
5》DateTimeFormatter
    处理日期和时间对象时，格式化以及解析日期时间对象是另一个非常重要的功能。新的java.time.format包就是特别为这个目的而设计的,这个包中，
    最重要的类是DateTimeFormatter。创建格式器最简单的方法是通过它的静态工厂方法以及常量。像BASIC_ISO_DATE和ISO_LOCAL_DATE这样的常量
    是DateTimeFormatter类的预定义实例,所有的DateTimeFormatter实例都能用于以一定的格式创建代表特定日期或时间的字符串.和老的
    java.util.DateFormat相比较,所有的DateTimeFormatter实例都是线程安全的。所以,你能够以单例模式创建格式器实例，就像DateTimeFormatter
    所定义的那些常量，eg：com.zhx.datetime.TestDateTimeFormatter
